#!/usr/bin/env bash
# FOSSology postinstall script
# Copyright (C) 2008-2013 Hewlett-Packard Development Company, L.P.
# Copyright (C) 2015 Siemens AG
#
# This script is for things that need to be done on the runtime system
# after we've installed the bits on the filesystem. It needs to be
# idempotent, meaning that running it repeatedly will still do the
# right thing, regardless of the success of previous runs.

show_help() {
  cat <<EOF
Usage: fo-postinstall [options]
  -a or --agent           : agent specific actions
  -d or --database        : Create the FOSSology database
  -w or --web-only        : web interface specific actions
  -s or --scheduler-only  : scheduler specific actions
  -e or --everything      : all actions, default
  -o or --overwrite       : overwrite config files with new versions
  -l or --licenseref      : update the license_ref table with fossology supplied licenses
  -c or --common          : common actions
  -h or --help            : this help text
 Special options
  --no-running-database   : omit all database operations
  --force-decision        : Force update of SHA256 hash in decision tables
  --force-pfile           : Force calculation of SHA256 hash of pfile entries
  --force-encode          : Force recoding copyright and sister tables
EOF
}

AGENT=''
DATABASE=''
WEBONLY=''
SCHEDULERONLY=''
EVERYTHING=true
OVERWRITE=''
LICENSEREF=''
COMMON=''
RUNNINGDATABASE=true
FORCEDECISION=''
FORCEPFILE=''
FORCEENCODE=''

## Options parsing and setup
# parse options
OPTS=$(getopt -o adwseolch --long agent,database,web-only,scheduler-only,everything,overwrite,licenseref,common,no-running-database,force-decision,force-pfile,force-encode,help -n 'fo-postinstall' -- "$@")

if [[ $? -ne 0 ]]; then
   OPTS="--help"
fi

eval set -- "$OPTS"

# If any flags are sent, set them and make everything false
while true; do
   case "$1" in
      -a|--agent)            AGENT=true; EVERYTHING=''; shift;;
      -d|--database)         DATABASE=true; EVERYTHING=''; shift;;
      -w|--web-only)         WEBONLY=true; EVERYTHING=''; shift;;
      -s|--scheduler-only)   SCHEDULERONLY=true; EVERYTHING=''; shift;;
      -e|--everything)       EVERYTHING=true; shift;;
      -o|--overwrite)        OVERWRITE=true; shift;;
      -l|--licenseref)       LICENSEREF=true; EVERYTHING=''; shift;;
      -c|--common)           COMMON=true; EVERYTHING=''; shift;;
      --no-running-database) RUNNINGDATABASE=''; EVERYTHING=''; shift;;
      --force-decision)      FORCEDECISION='--force-decision'; shift;;
      --force-pfile)         FORCEPFILE='--force-pfile'; shift;;
      --force-encode)        FORCEENCODE='--force-encode'; shift;;
      -h|--help)             show_help; exit;;
      --)                    shift; break;;
      *)                     echo "Error: option $1 not recognised"; exit 1;;
   esac
done

# If everything flags were sent, set everything to true to prevent overwrite
if [[ $OPT == *" -e "* || $OPT == *" --everything "* ]]; then
    EVERYTHING=true
fi

set -o errexit -o nounset -o pipefail

if [[ $EVERYTHING ]]; then
   echo "*** Running postinstall for everything ***"
   COMMON=true
   SCHEDULERONLY=true
   AGENT=true
   DATABASE=true
   WEBONLY=true
   LICENSEREF=true
fi

must_run_as_root() {
  # This must run as root.
  if [[ $(id -u) -ne 0 ]] ; then
    echo >&2 "ERROR: fo-postinstall must run as root."
    echo >&2 "Aborting."
    exit 1
  fi
}

read_config_value() {
   local line="$1"
   local key="$2"
   local out="$3"
   [[ "$out" =~ ^[a-zA-Z]+$ ]] || { echo >&2 "FATAL: bad parameters to read_config_value: $@"; exit 1; }
   if [[ $line =~ ^[[:space:]]*$key[[:space:]]*\=[[:space:]]*([^[:space:]\']*) ]]; then
      eval "$out='${BASH_REMATCH[1]}'"
   fi
}

set_value_in_section() {
   echo "NOTE: writing $2=$3 in section $4 of $1"
   sed -e "s/\[$4\]/[$4]\n$2=$3/" -i.bak "$1"
}

REPO=''
PROJECTGROUP=''
CONFIG="/usr/local/etc/fossology/fossology.conf"
if [[ -f $CONFIG ]]; then
   while read line; do
      read_config_value "$line" path REPO
      read_config_value "$line" PROJECTGROUP PROJECTGROUP
   done < "$CONFIG"
   [[ $PROJECTGROUP =~ ^[a-z0-9]*$ ]] || { echo >&2 "ERROR: bad value for PROJECTGROUP in config"; exit 2; }
else
   echo >&2 "ERROR: Cannot find $CONFIG"
   exit 1
fi

if [[ $COMMON ]]; then
   must_run_as_root
   echo "*** Running postinstall for common actions***"

   # check path to repo
   [[ $REPO ]] || { echo >&2 "ERROR: path is not set in $CONFIG"; exit 1; }

   # set default when PROJECTGROUP is not set
   [[ $PROJECTGROUP ]] || {
      set_value_in_section "$CONFIG" PROJECTGROUP fossy 'DIRECTORIES'
      PROJECTGROUP="fossy"
   }

   ## create user and group
   # Because we are doing these by name, in the multi-machine install case
   # we may end up with uid/gid being different across machines. This will
   # either need to be fixed by hand or with NFSv4 you can use rpc.idmapd
   # to do uid/gid mapping. More details will be provided in the multi-machine
   # documentation.

   # Make sure the user and group exist, if not then create
   echo "*** Creating user and group ***"

   # check for group
   if grep -q "^$PROJECTGROUP:" /etc/group; then
      echo "NOTE: group '$PROJECTGROUP' already exists, good."
   elif groupadd --system "$PROJECTGROUP"; then
      echo "NOTE: group '$PROJECTGROUP' created"
   else
      echo >&2 "ERROR: Unable to create group '$PROJECTGROUP'"
      exit 1
   fi

   # check for user
   if grep -q "^fossy:" /etc/passwd; then
      echo "NOTE: user 'fossy' already exists, good."
      USERSHELL=$(grep "^fossy:" /etc/passwd | cut -d: -f 7)
      if [[ $USERSHELL == "/bin/false" ]]; then
         echo >&2 "ERROR: fossy shell must be a real shell"
         exit 1
      fi
      USERHOME=$(grep "^fossy:" /etc/passwd | cut -d: -f 6)
      if [[ $USERHOME != "/home/fossy" ]]; then
         echo "NOTE: change user 'fossy' homedir from $USERHOME to /home/fossy."
         mkdir --parents /home/fossy
         chown fossy:$PROJECTGROUP /home/fossy
         usermod --home /home/fossy fossy
      fi
   elif useradd --comment "fossology" --gid $PROJECTGROUP --create-home --shell /bin/bash --system fossy; then
      echo "NOTE: user 'fossy' created"
   else
      echo >&2 "ERROR: Unable to create user 'fossy'"
      exit 1
   fi

   ## check for existance/ownership/permissions of needed directories
   echo "*** Making sure needed dirs exist with right ownership/permissions ***"

   if [[ -d "/var/local/cache/fossology" ]]; then
       echo "*** clearing file cache ***"
       rm --force --recursive /var/local/cache/fossology/*
   fi
   if [[ -d "$REPO" ]]; then
       echo "NOTE: Repository already exists at $REPO"
   fi

   mkdir --parents \
      "/var/local/lib/fossology" \
      "/var/local/lib/fossology/agents" \
      "/var/local/cache/fossology" \
      "$REPO" \
      "/srv/fossology/repository/fossdash"
      
   chown root:$PROJECTGROUP "/var/local/lib/fossology" "/var/local/lib/fossology/agents" /var/local/cache/fossology
   chmod 2775 "/var/local/lib/fossology" "/var/local/lib/fossology/agents" /var/local/cache/fossology "/srv/fossology/repository/fossdash"
   
   # make sure repo and its parent dir has the right permissions
   if [[ $(stat -c "%G" $REPO) != fossy ]]; then
     echo "NOTE: Repository group is not correct."
     echo "Fixing..This may take long duration, depending on your repository size."
     chown --recursive fossy:$PROJECTGROUP ${REPO%/*} $REPO
   fi
   chmod 2770 ${REPO%/*} $REPO

   # make install sets Db.conf's mode to 660, but can't chgrp it because
   # the group doesn't exist until we create it above. So chgrp now
   chgrp $PROJECTGROUP /usr/local/etc/fossology/Db.conf || echo >&2 "ERROR: failed to chgrp /usr/local/etc/fossology/Db.conf"

   cat <<EOF
NOTE: Running the PostgreSQL vacuum and analyze command can result in a large database performance improvement.
      We suggest that you either configure postgres to run its autovacuum and autoanalyze daemons, or maintagent -D in a cron job, or run Admin > Maintenance on a regular basis.
      Admin > Dashboard will show you the last time vacuum and analyze have been run.
EOF
fi

[[ $PROJECTGROUP ]] || { echo "PROJECTGROUP is not set"; exit 2; }

if [[ $WEBONLY ]]; then
   echo "*** Running postinstall for web-only actions***"
   LICENSEREF=true
fi

########################################################################

if [[ $DATABASE && $RUNNINGDATABASE ]]; then
   /usr/local/lib/fossology/dbcreate
fi # end of DATABASE

if [[ $LICENSEREF && $RUNNINGDATABASE ]]; then
    must_run_as_root
    echo "*** update the database and license_ref table ***"
    /usr/local/lib/fossology/fossinit.php -l -c /usr/local/etc/fossology $FORCEDECISION $FORCEPFILE $FORCEENCODE
fi # end of license reference

########################################################################

if [[ $AGENT ]]; then
   must_run_as_root
   # change all files ownership to fossy:$PROJECTGROUP
   chown --recursive fossy:$PROJECTGROUP /usr/local/share/fossology /usr/local/lib/fossology /usr/local/etc/fossology
   chown --silent fossy:$PROJECTGROUP /usr/local/include/libfossology.h
   chown --silent fossy:$PROJECTGROUP /usr/local/share/man/man1/cp2foss.1{,.gz} /usr/local/share/man/man1/fossjobs.1{,.gz} || echo
fi

if [[ $AGENT && $RUNNINGDATABASE ]]; then
   if ! /usr/local/lib/fossology/fo_dbcheck.php -c /usr/local/etc/fossology; then
     echo "FATAL: unable to connect to database, please check /usr/local/etc/fossology/Db.conf"
     exit 1
   fi
   echo "Database connectivity is good."
fi # end of AGENT

########################################################################

if [[ $SCHEDULERONLY ]]; then
   must_run_as_root
   echo "*** Setting up scheduler ***"

   # Create the scheduler log directory.
   if [[ -f /var/log/fossology ]] ; then
     # Must be a directory and not a file
     rm --force /var/log/fossology
   fi
   mkdir --parents /var/log/fossology
   chown --recursive fossy:$PROJECTGROUP /var/log/fossology
   chmod 2775 /var/log/fossology
   find /var/log/fossology -type f -print0 | xargs --no-run-if-empty --null chmod 660
fi # end of SCHEDULERONLY

########################################################################
if [[ $WEBONLY ]]; then
  must_run_as_root
  RESTART_MESSAGE=false

  echo "*** Setting up the web interface ***"

  # See if web server user exists, if so add to the group.
  # check for www-data (Debian, etc)
  if grep -q "^www-data:" /etc/passwd; then
    echo "NOTE: Adding user www-data to group $PROJECTGROUP"
    # this is smart enough to not add multiple times so it's ok to repeat
    usermod --groups $PROJECTGROUP --append www-data
  fi

  # check for apache (RHEL/CentOS, etc)
  if grep -q "^apache:" /etc/passwd; then
    echo "NOTE: Adding user apache to group $PROJECTGROUP"
    # this is smart enough to not add multiple times so it's ok to repeat
    usermod --groups $PROJECTGROUP --append apache
  fi

  # Enable mod_rewrite for REST API
  if [[ -f /etc/httpd/conf.modules.d/00-base.conf ]]; then
    # We are on RHEL
    if ! egrep -q "^LoadModule rewrite_module modules/mod_rewrite.so" /etc/httpd/conf.modules.d/00-base.conf; then
      echo "NOTE: Enabling apache module rewrite"
      echo "LoadModule rewrite_module modules/mod_rewrite.so" >> /etc/httpd/conf.modules.d/00-base.conf
      RESTART_MESSAGE=true
    fi
  else
    # We are on Debian
    if ! a2query -q -m rewrite; then
      echo "NOTE: Enabling apache module rewrite"
      /usr/sbin/a2enmod rewrite
      RESTART_MESSAGE=true
    fi
  fi

  # Enable fossology for source install
  if [[ "" != *"debian"* ]]; then
    if [[ -d /etc/apache2/sites-available ]]; then
      if [[ -f /etc/apache2/sites-available/fossology.conf ]]; then
        echo "Fossology already enabled for apache2";
      else
        echo "NOTE: enabling fossology site for apache2";
        ln -s /usr/local/etc/fossology/conf/src-install-apache-example.conf /etc/apache2/sites-available/fossology.conf;
        /usr/sbin/a2ensite fossology.conf;
        RESTART_MESSAGE=true
      fi;
    elif [[ -d /etc/httpd/conf.d ]]; then
      if [[ -f /etc/httpd/conf.d/fossology.conf ]]; then
        echo "Fossology already enabled for httpd";
      else
        echo "NOTE: enabling fossology site for httpd";
        ln -s /usr/local/etc/fossology/conf/src-install-apache-example.conf /etc/httpd/conf.d/fossology.conf;
        RESTART_MESSAGE=true
      fi;
    fi;
  fi;

  # apache2 reload is only necessary when it is running.
  if /etc/init.d/apache2 status > /dev/null; then
    /etc/init.d/apache2 reload
    if [[ "$RESTART_MESSAGE" = true ]]; then
      echo "NOTE: Restart apache to apply the changes"
    fi
  fi
fi # end of WEBONLY

########################################################################

echo "FOSSology postinstall complete, but sure to complete the remaining"
echo "  steps in the INSTALL instructions."
